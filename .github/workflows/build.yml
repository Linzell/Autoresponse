name: Build & Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NODE_VERSION: '20'

jobs:
  tests:
    name: Run Tests
    uses: ./.github/workflows/frontend.yml
    secrets: inherit

  rust-tests:
    name: Run Rust Tests
    uses: ./.github/workflows/rust-tauri.yml
    secrets: inherit

  analyze:
    name: Code Analysis
    needs: [tests, rust-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: frontend-coverage
          path: coverage/

      - name: Download Rust coverage
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: rust-coverage
          path: coverage/rust/

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=autoresponse
            -Dsonar.sources=src,src-tauri/src
            -Dsonar.tests=src/**/*.test.tsx,src/**/*.test.ts,src-tauri/tests
            -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.rust.coverage.reportPaths=coverage/rust/cobertura.xml

  build:
    name: Build
    needs: [analyze, tests, rust-tests]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - platform: ubuntu-latest
            os_name: linux
          - platform: macos-latest
            os_name: darwin
          - platform: windows-latest
            os_name: win32

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install bun
        uses: oven-sh/setup-bun@v1

      - name: Install dependencies
        run: bun install

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Build
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: "Autoresponse v${{ github.ref_name }}"
          releaseBody: |
            See the assets to download and install this version.
            
            For a full list of changes, see the [CHANGELOG.md](https://github.com/username/autoresponse/blob/main/CHANGELOG.md)
          releaseDraft: ${{ !startsWith(github.ref, 'refs/tags/') }}
          prerelease: false

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: autoresponse-${{ matrix.os_name }}
          path: |
            src-tauri/target/release/bundle/
            !src-tauri/target/release/bundle/*/
          retention-days: 7

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body_path: CHANGELOG.md
          fail_on_unmatched_files: true