name: Rust Checks & Security

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_call:
    secrets:
      SONAR_TOKEN:
        required: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_NET_RETRY: 3
  RUST_CACHE_VERSION: 1

jobs:
  setup:
    name: Setup Build Cache
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: |
          echo "value=${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ env.RUST_CACHE_VERSION }}" >> $GITHUB_OUTPUT

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      # Check for existing build cache
      - name: Check build cache
        id: build-cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ steps.cache-key.outputs.value }}-build
          restore-keys: |
            ${{ steps.cache-key.outputs.value }}-build
            ${{ steps.cache-key.outputs.value }}-
            ${{ runner.os }}-cargo-

      # Only fetch and build if cache miss
      - name: Fetch dependencies
        if: steps.build-cache.outputs.cache-hit != 'true'
        working-directory: src-tauri
        run: cargo fetch

      - name: Build project
        if: steps.build-cache.outputs.cache-hit != 'true'
        working-directory: src-tauri
        run: cargo build --release

      # Secondary cache with unique key per job
      - name: Setup secondary cache
        if: steps.build-cache.outputs.cache-hit != 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ steps.cache-key.outputs.value }}-build
          restore-keys: |
            ${{ steps.cache-key.outputs.value }}-
            ${{ runner.os }}-cargo-

  security:
    name: Security Audit
    needs: setup
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_call' || inputs.run_security
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ needs.setup.outputs.cache-key }}-build
          restore-keys: |
            ${{ needs.setup.outputs.cache-key }}-build
            ${{ needs.setup.outputs.cache-key }}-

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run security audit
        working-directory: src-tauri
        run: cargo audit

  deps:
    name: Dependencies Check
    needs: setup
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_call' || inputs.run_deps
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ needs.setup.outputs.cache-key }}-deps
          restore-keys: |
            ${{ needs.setup.outputs.cache-key }}-build
            ${{ needs.setup.outputs.cache-key }}-

      - name: Check dependencies
        working-directory: src-tauri
        run: |
          cargo update --dry-run
          cargo tree --duplicate

  check:
    name: Code Quality
    needs: setup
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_call' || inputs.run_check
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ needs.setup.outputs.cache-key }}-check
          restore-keys: |
            ${{ needs.setup.outputs.cache-key }}-build
            ${{ needs.setup.outputs.cache-key }}-

      # Run checks in parallel for better performance
      - name: Check format
        working-directory: src-tauri
        run: cargo fmt --check

      - name: Check clippy
        working-directory: src-tauri
        if: success() || failure() # Run even if fmt fails
        run: |
          # Run clippy with optimized settings
          RUSTFLAGS="-D warnings" cargo clippy --no-deps --all-features --all-targets

      - name: Check documentation
        working-directory: src-tauri
        if: success() || failure() # Run even if previous steps fail
        run: |
          # Run doc checks with optimized settings
          RUSTDOCFLAGS="-D warnings" cargo doc --no-deps --document-private-items --all-features

      - name: Save check cache
        uses: actions/cache/save@v3
        if: success()
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ needs.setup.outputs.cache-key }}-check

  test:
    name: Test
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ needs.setup.outputs.cache-key }}-test
          restore-keys: |
            ${{ needs.setup.outputs.cache-key }}-build
            ${{ needs.setup.outputs.cache-key }}-

      # Split test execution
      - name: Run tests
        working-directory: src-tauri
        run: |
          # Run tests in parallel with optimized settings
          RUST_TEST_THREADS=8 cargo test --all-features --no-fail-fast -- --test-threads=8

      # Coverage with cached tarpaulin
      - name: Install cargo-tarpaulin
        if: success() || failure()
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-tarpaulin

      - name: Generate coverage
        if: success() || failure()
        working-directory: src-tauri
        run: |
          mkdir -p ../coverage
          cargo tarpaulin --out xml --output-dir ../coverage --timeout 120 --all-features --workspace

      - name: Upload coverage
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: rust-coverage
          path: coverage/
          retention-days: 14
